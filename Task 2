import pandas as pd
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Download the dataset from nltk
nltk.download('movie_reviews')

from nltk.corpus import movie_reviews

# Load the data into a DataFrame
reviews = []
for category in movie_reviews.categories():
    for fileid in movie_reviews.fileids(category):
        reviews.append((movie_reviews.raw(fileid), category))

df = pd.DataFrame(reviews, columns=['review', 'sentiment'])
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Drop missing values if any
df.dropna(inplace=True)

# Download stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import re

stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def preprocess_text(text):
    # Remove punctuation and numbers
    text = re.sub('[^a-zA-Z]', ' ', text)
    
    # Convert to lowercase
    text = text.lower()
    
    # Tokenize
    words = text.split()
    
    # Remove stopwords and stem the words
    words = [stemmer.stem(word) for word in words if word not in stop_words]
    
    # Join the words back into one string separated by space
    return ' '.join(words)

df['review'] = df['review'].apply(preprocess_text)
print(df.head())

# Split the data into training and testing sets
X = df['review']
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert text data to numerical data
vectorizer = CountVectorizer(max_features=5000)
X_train_vectors = vectorizer.fit_transform(X_train)
X_test_vectors = vectorizer.transform(X_test)

# Train a Naive Bayes classifier
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train_vectors, y_train)

# Evaluate the model
y_pred = nb_classifier.predict(X_test_vectors)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# Print classification report
print(classification_report(y_test, y_pred))
